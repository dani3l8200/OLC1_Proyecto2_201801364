/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,16],$V6=[1,15],$V7=[2,5,7],$V8=[2,5,7,12,17,26,27,28,29,30],$V9=[1,31],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,45],$Vi=[1,46],$Vj=[7,12,17,26,27,28,29,30],$Vk=[1,54],$Vl=[7,12,17],$Vm=[20,31],$Vn=[1,69],$Vo=[1,79],$Vp=[1,76],$Vq=[1,77],$Vr=[1,78],$Vs=[1,80],$Vt=[1,81],$Vu=[1,82],$Vv=[1,83],$Vw=[1,84],$Vx=[1,90],$Vy=[1,91],$Vz=[1,92],$VA=[1,93],$VB=[1,94],$VC=[1,95],$VD=[1,96],$VE=[1,97],$VF=[1,98],$VG=[1,99],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[19,20,31,52,53,54,55,56,57,58,59,60,61,62,63,64,65],$VM=[1,107],$VN=[1,112],$VO=[1,139],$VP=[1,138],$VQ=[1,141],$VR=[19,31],$VS=[19,20,31,52,53,58,59,60,61,62,63,64,65],$VT=[19,20,31,52,53,54,55,57,58,59,60,61,62,63,64,65],$VU=[19,20,31,58,59,60,61,62,63,64,65],$VV=[19,20,31,62,63,64,65],$VW=[2,9,12,19,20,26,27,28,29,30,31,52,53,54,55,56,57,58,59,60,61,62,63,64,65,73,74,76,78,80,81,82,83,84],$VX=[1,165],$VY=[1,166],$VZ=[1,167],$V_=[1,168],$V$=[1,169],$V01=[1,170],$V11=[1,171],$V21=[1,172],$V31=[1,173],$V41=[1,174],$V51=[1,175],$V61=[2,7,9,12,17,26,27,28,29,30,73,74,76,77,78,80,81,82,83,84],$V71=[2,9,12,26,27,28,29,30,73,74,76,78,80,81,82,83,84],$V81=[1,189],$V91=[1,193],$Va1=[2,10,20],$Vb1=[1,234];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"ListsClass":4,"EOF":5,"CLASSESORINTERFACE":6,"public":7,"class":8,"identifier":9,"{":10,"BODYC":11,"}":12,"interface":13,"BODYI":14,"ERROR":15,"METHODI":16,"void":17,"(":18,")":19,";":20,"TYPE":21,"PARAMS":22,"METHODC":23,"DECLARATION":24,"BODY":25,"int":26,"double":27,"boolean":28,"char":29,"String":30,",":31,"PARAM":32,"SENTENCES":33,"SENTENCE":34,"ASSIGMENT":35,"CALLMETHOD":36,"PRINTS":37,"IFS":38,"FOR":39,"WHILE":40,"DOWHILE":41,"RETURN":42,"BREAK":43,"CONTINUE":44,"IDLIST":45,"ID":46,"ASSIGMENTEXPRESSION":47,"++":48,"--":49,"=":50,"EXPRESSION":51,"+":52,"-":53,"*":54,"/":55,"^":56,"%":57,"<":58,">":59,"<=":60,">=":61,"==":62,"!=":63,"||":64,"&&":65,"!":66,"stringContent":67,"character":68,"decimal":69,"true":70,"false":71,"CALLPARAMS":72,"print":73,"println":74,"CONDITION":75,"if":76,"else":77,"for":78,"ITERATOR":79,"while":80,"do":81,"return":82,"break":83,"continue":84,":":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"public",8:"class",9:"identifier",10:"{",12:"}",13:"interface",17:"void",18:"(",19:")",20:";",26:"int",27:"double",28:"boolean",29:"char",30:"String",31:",",48:"++",49:"--",50:"=",52:"+",53:"-",54:"*",55:"/",56:"^",57:"%",58:"<",59:">",60:"<=",61:">=",62:"==",63:"!=",64:"||",65:"&&",66:"!",67:"stringContent",68:"character",69:"decimal",70:"true",71:"false",73:"print",74:"println",76:"if",77:"else",78:"for",80:"while",81:"do",82:"return",83:"break",84:"continue",85:":"},
productions_: [0,[3,2],[3,1],[3,1],[4,2],[4,1],[6,6],[6,6],[6,5],[6,5],[6,6],[6,6],[6,2],[14,2],[14,1],[14,2],[16,6],[16,6],[16,7],[16,7],[16,2],[11,2],[11,2],[11,1],[11,1],[11,2],[23,6],[23,6],[23,7],[23,7],[23,2],[21,1],[21,1],[21,1],[21,1],[21,1],[22,3],[22,1],[32,2],[32,1],[25,2],[25,3],[25,1],[33,2],[33,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[24,3],[45,3],[45,1],[46,1],[46,2],[35,3],[35,3],[35,3],[47,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[36,3],[36,4],[72,3],[72,1],[37,4],[37,4],[37,3],[37,3],[75,3],[75,1],[38,3],[38,5],[38,5],[39,11],[39,10],[39,2],[79,2],[79,2],[40,3],[41,5],[42,2],[42,3],[43,2],[44,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Nodo('Start'); this.$.addChildrens($$[$0-1]);  auxNodo = this.$; console.log(auxNodo); return auxNodo; 
break;
case 4:
this.$ = new Nodo('ListsClass'); this.$.addChildrens($$[$0-1]); this.$.addChildrens($$[$0]);
break;
case 5:
 this.$ = new Nodo('ListsClass'); this.$.addChildrens($$[$0]); 
break;
case 6: case 7:
 this.$ = new Nodo('CLASSESORINTERFACE'); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0])); 
break;
case 8: case 9:
this.$ = new Nodo('CLASSESORINTERFACE'); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0])); 
break;
case 10: case 11: case 12: case 15: case 20: case 25: case 30: case 39: case 42: case 56: case 99: case 105:
 errorList.push(new Error(idError, 'Syntactic error', this._$.first_line, this._$.first_column, yytext)); console.error('Syntactic error: ' + yytext  + ' in the line ' + this._$.first_line + ' and column ' + this._$.first_column); idError++; 
break;
case 13:
this.$ = new Nodo('BODYI'); this.$.addChildrens($$[$0-1]); this.$.addChildrens($$[$0]);
break;
case 14:
this.$ = new Nodo('BODYI'); this.$.addChildrens($$[$0]);
break;
case 16:
this.$ = new Nodo('METHODI'); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0])); 
break;
case 17:
this.$ = new Nodo('METHODI'); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens($$[$0-4]); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 18:
this.$ = new Nodo('METHODC'); this.$.addChildrens(new Nodo($$[$0-6])); this.$.addChildrens($$[$0-5]); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 19:
this.$ = new Nodo('METHODC'); this.$.addChildrens(new Nodo($$[$0-6])); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 21: case 22:
this.$ = new Nodo('BODYC'); this.$.addChildrens($$[$0-1]); this.$.addChildrens($$[$0]);
break;
case 23:
this.$ = new Nodo('BODYC'); this.$.addChildrens($$[$0]); 
break;
case 24:
this.$ = new Nodo('BODYC'); this.$.addChildrens($$[$0]);
break;
case 26:
this.$ = new Nodo('METHODC');this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 27:
this.$ = new Nodo('METHODC'); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens($$[$0-4]); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 28:
this.$ = new Nodo('METHODC'); this.$.addChildrens(new Nodo($$[$0-6])); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 29:
this.$ = new Nodo('METHODC'); this.$.addChildrens(new Nodo($$[$0-6])); this.$.addChildrens($$[$0-5]); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 31: case 32: case 33: case 34: case 35:
this.$ = new Nodo('TYPE'); this.$.addChildrens(new Nodo($$[$0]));
break;
case 36:
this.$ = new Nodo('PARAMS'); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 37:
this.$ = new Nodo('PARAMS'); this.$.addChildrens($$[$0]);
break;
case 38:
this.$ = new Nodo('PARAM'); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 40:
this.$ = new Nodo('BODY'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 41:
this.$ = new Nodo('BODY'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 43:
this.$ = new Nodo('SENTENCES'); this.$.addChildrens($$[$0-1]); this.$.addChildrens($$[$0]);
break;
case 44:
this.$ = new Nodo('SENTENCES'); this.$.addChildrens($$[$0]);
break;
case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55:
this.$ = new Nodo('SENTENCE'); this.$.addChildrens($$[$0]);
break;
case 57:
this.$ = new Nodo('DECLARATION'); this.$.addChildrens($$[$0-2]); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 58:
this.$ = new Nodo('IDLIST'); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 59:
this.$ = new Nodo('IDLIST'); this.$.addChildrens($$[$0]);
break;
case 60:
this.$ = new Nodo('ID'); this.$.addChildrens(new Nodo($$[$0]));
break;
case 61:
this.$ = new Nodo('ID'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 62:
this.$ = new Nodo('ASSIGMENT'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0])); 
break;
case 63: case 64:
this.$ = new Nodo('ASSIGMENT'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new nodo($$[$0]));
break;
case 65:
this.$ = new Nodo('ASSIGMENTEXPRESSION'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79:
this.$ = new Nodo('EXPRESSION'); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 80:
this.$ = new Nodo('EXPRESSION'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 81: case 82:
this.$ = new Nodo('EXPRESSION'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 83: case 84: case 85: case 86: case 87: case 88:
this.$ = new Nodo('EXPRESSION'); this.$.addChildrens(new Nodo($$[$0]));
break;
case 89:
this.$ = new Nodo('EXPRESSION'); this.$.addChildrens($$[$0]);
break;
case 90:
this.$ = new Nodo('CALLMETHOD'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0])); 
break;
case 91:
this.$ = new Nodo('CALLMETHOD'); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 92:
this.$ = new Nodo('CALLPARAMS'); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0-1]);
break;
case 93:
this.$ = new Nodo('CALLPARAMS'); this.$.addChildrens($$[$0]);
break;
case 94: case 95:
this.$ = new Nodo('PRINTS'); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 96: case 97:
this.$ = new Nodo('PRINTS'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 98:
this.$ = new Nodo('CONDITION'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 100:
this.$ = new Nodo('IFS'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens($$[$0]);
break;
case 101: case 102:
this.$ = new Nodo('IFS'); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens($$[$0-3]); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]);
break;
case 103:
this.$ = new Nodo('FOR'); this.$.addChildrens(new Nodo($$[$0-10])); this.$.addChildrens(new Nodo($$[$0-9])); this.$.addChildrens($$[$0-8]); this.$.addChildrens(new Nodo($$[$0-7])); this.$.addChildrens($$[$0-6]); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens($$[$0-4]); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]); 
break;
case 104:
this.$ = new Nodo('FOR'); this.$.addChildrens(new Nodo($$[$0-9])); this.$.addChildrens(new Nodo($$[$0-8])); this.$.addChildrens(new Nodo($$[$0-7])); this.$.addChildrens($$[$0-6]); this.$.addChildrens(new Nodo($$[$0-5])); this.$.addChildrens($$[$0-4]); this.$.addChildrens(new Nodo($$[$0-3])); this.$.addChildrens($$[$0-2]); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens($$[$0]); 
break;
case 106: case 107:
this.$ = new Nodo('ITERATOR'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 108:
this.$ = new Nodo('WHILE'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens($$[$0]);
break;
case 109:
this.$ = new Nodo('DOWHILE'); this.$.addChildrens(new Nodo($$[$0-4])); this.$.addChildrens($$[$0-3]); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 110:
this.$ = new Nodo('RETURN'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 111:
this.$ = new Nodo('RETURN'); this.$.addChildrens(new Nodo($$[$0-2])); this.$.addChildrens($$[$0-1]); this.$.addChildrens(new Nodo($$[$0]));
break;
case 112:
this.$ = new Nodo('BREAK'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
case 113:
this.$ = new Nodo('CONTINUE'); this.$.addChildrens(new Nodo($$[$0-1])); this.$.addChildrens(new Nodo($$[$0]));
break;
}
},
table: [{2:[1,4],3:1,4:2,5:[1,3],6:5,7:$V0},{1:[3]},{2:[1,9],5:[1,7],6:8,7:$V0},{1:[2,2]},{1:[2,3],10:$V1,12:$V2,15:10,18:$V3,19:$V4,20:$V5,85:$V6},o($V7,[2,5]),{8:[1,17],13:[1,18]},{1:[2,1]},o($V7,[2,4]),{10:$V1,12:$V2,15:10,18:$V3,19:$V4,20:$V5,85:$V6},o($V7,[2,12]),o($V8,[2,114]),o($V8,[2,115]),o($V8,[2,116]),o($V8,[2,117]),o($V8,[2,118]),o($V8,[2,119]),{2:[1,20],9:[1,19]},{2:[1,22],9:[1,21]},{10:[1,23]},{10:[1,24]},{10:[1,25]},{10:[1,26]},{2:$V9,7:$Va,11:27,12:[1,28],17:$Vb,21:32,23:30,24:29,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},{2:$V9,7:$Va,11:40,17:$Vb,21:32,23:30,24:29,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},{2:[1,44],7:$Vh,12:[1,42],14:41,16:43,17:$Vi},{2:$V9,7:$Va,11:47,17:$Vb,21:32,23:30,24:29,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},{7:$Va,12:[1,48],17:$Vb,21:32,23:49,24:50,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},o($V7,[2,8]),o($Vj,[2,23]),o($Vj,[2,24]),{10:$V1,12:$V2,15:51,18:$V3,19:$V4,20:$V5,85:$V6},{9:$Vk,45:52,46:53},{17:[1,55],21:56,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},{2:[1,57]},{9:[2,31]},{9:[2,32]},{9:[2,33]},{9:[2,34]},{9:[2,35]},{7:$Va,12:[1,58],17:$Vb,21:32,23:49,24:50,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},{7:$Vh,12:[1,59],16:60,17:$Vi},o($V7,[2,9]),o($Vl,[2,14]),{10:$V1,12:$V2,15:61,18:$V3,19:$V4,20:$V5,85:$V6},{17:[1,62],21:63,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},{2:[1,64]},{7:$Va,12:[1,65],17:$Vb,21:32,23:49,24:50,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},o($V7,[2,6]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,25]),{20:[1,66],31:[1,67]},o($Vm,[2,59]),o($Vm,[2,60],{47:68,50:$Vn}),{9:[1,70]},{9:[1,71]},o($Vj,[2,30]),o($V7,[2,10]),o($V7,[2,7]),o($Vl,[2,13]),o($Vl,[2,15]),{9:[1,72]},{9:[1,73]},o($Vl,[2,20]),o($V7,[2,11]),o([2,7,9,12,17,26,27,28,29,30,73,74,76,78,80,81,82,83,84],[2,57]),{9:$Vk,46:74},o($Vm,[2,61]),{9:$Vo,18:$Vp,36:85,51:75,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{18:[1,86]},{18:[1,87]},{18:[1,88]},{18:[1,89]},o($Vm,[2,58]),o($Vm,[2,65],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK}),{9:$Vo,18:$Vp,36:85,51:104,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:105,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:106,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($VL,[2,83],{18:$VM}),o($VL,[2,84]),o($VL,[2,85]),o($VL,[2,86]),o($VL,[2,87]),o($VL,[2,88]),o($VL,[2,89]),{2:$VN,19:[1,108],21:111,22:109,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,32:110},{2:$VN,19:[1,113],21:111,22:114,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,32:110},{2:$VN,19:[1,115],21:111,22:116,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,32:110},{2:$VN,19:[1,117],21:111,22:118,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,32:110},{9:$Vo,18:$Vp,36:85,51:119,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:120,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:121,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:122,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:123,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:124,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:125,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:126,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:127,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:128,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:129,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:130,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:131,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:$Vo,18:$Vp,36:85,51:132,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{19:[1,133],52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK},o($VL,[2,81]),o($VL,[2,82]),{9:$Vo,18:$Vp,19:[1,134],36:85,51:136,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:135},{2:$VO,10:$VP,25:137},{19:[1,140],31:$VQ},o($VR,[2,37]),{9:[1,142]},o($VR,[2,39]),{2:$VO,10:$VP,25:143},{19:[1,144],31:$VQ},{20:[1,145]},{19:[1,146],31:$VQ},{20:[1,147]},{19:[1,148],31:$VQ},o($VS,[2,66],{54:$Vz,55:$VA,56:$VB,57:$VC}),o($VS,[2,67],{54:$Vz,55:$VA,56:$VB,57:$VC}),o($VT,[2,68],{56:$VB}),o($VT,[2,69],{56:$VB}),o($VL,[2,70]),o($VT,[2,71],{56:$VB}),o($VU,[2,72],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC}),o($VU,[2,73],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC}),o($VU,[2,74],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC}),o($VU,[2,75],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC}),o($VV,[2,76],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o($VV,[2,77],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o([19,20,31,64],[2,78],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,65:$VK}),o([19,20,31,64,65],[2,79],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI}),o($VL,[2,80]),o($VW,[2,90]),{19:[1,149],31:[1,150]},o($VR,[2,93],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK}),o($Vj,[2,26]),{2:$VX,9:$VY,12:[1,151],21:32,24:154,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,33:152,34:153,35:155,36:156,37:157,38:158,39:159,40:160,41:161,42:162,43:163,44:164,73:$VZ,74:$V_,76:$V$,78:$V01,80:$V11,81:$V21,82:$V31,83:$V41,84:$V51},o($V61,[2,42]),{2:$VO,10:$VP,25:176},{2:$VN,21:111,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,32:177},o($VR,[2,38]),o($Vj,[2,27]),{2:$VO,10:$VP,25:178},o($Vl,[2,16]),{20:[1,179]},o($Vl,[2,17]),{20:[1,180]},o($VW,[2,91]),{9:$Vo,18:$Vp,36:85,51:181,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($V61,[2,40]),{2:$VX,9:$VY,12:[1,182],21:32,24:154,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,34:183,35:155,36:156,37:157,38:158,39:159,40:160,41:161,42:162,43:163,44:164,73:$VZ,74:$V_,76:$V$,78:$V01,80:$V11,81:$V21,82:$V31,83:$V41,84:$V51},o($V71,[2,44]),o($V71,[2,45]),o($V71,[2,46]),o($V71,[2,47]),o($V71,[2,48]),o($V71,[2,49]),o($V71,[2,50]),o($V71,[2,51]),o($V71,[2,52]),o($V71,[2,53]),o($V71,[2,54]),o($V71,[2,55]),o($V71,[2,56]),{18:$VM,47:184,48:[1,185],49:[1,186],50:$Vn},{2:$V81,18:[1,187],75:188},{2:$V81,18:[1,190],75:191},{2:$V81,18:$V91,75:192},{2:[1,195],18:[1,194]},{2:$V81,18:$V91,75:196},{2:$VO,10:$VP,25:197},{9:$Vo,18:$Vp,20:[1,198],36:85,51:199,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{20:[1,200]},{20:[1,201]},o($Vj,[2,28]),o($VR,[2,36]),o($Vj,[2,29]),o($Vl,[2,19]),o($Vl,[2,18]),o($VR,[2,92],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK}),o($V61,[2,41]),o($V71,[2,43]),{20:[1,202]},{20:[1,203]},{20:[1,204]},{9:$Vo,18:$Vp,19:[1,205],36:85,51:206,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{20:[1,207]},o($Va1,[2,99]),{9:$Vo,18:$Vp,19:[1,208],36:85,51:206,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{20:[1,209]},{2:$VO,10:$VP,25:210},{9:$Vo,18:$Vp,36:85,51:206,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{9:[1,212],21:211,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg},o($V71,[2,105]),{2:$VO,10:$VP,25:213},{80:[1,214]},o($V71,[2,110]),{20:[1,215],52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK},o($V71,[2,112]),o($V71,[2,113]),o($V71,[2,62]),o($V71,[2,63]),o($V71,[2,64]),{20:[1,216]},{19:[1,217],52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK},o($V71,[2,96]),{20:[1,218]},o($V71,[2,97]),o($V71,[2,100],{77:[1,219]}),{9:[1,220]},{47:221,50:$Vn},o($V71,[2,108]),{2:$V81,18:$V91,75:222},o($V71,[2,111]),o($V71,[2,94]),o($Va1,[2,98]),o($V71,[2,95]),{2:$VO,10:$VP,25:224,38:223,76:$V$},{47:225,50:$Vn},{20:[1,226]},{20:[1,227]},o($V71,[2,101]),o($V71,[2,102]),{20:[1,228]},{9:$Vo,18:$Vp,36:85,51:229,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},o($V71,[2,109]),{9:$Vo,18:$Vp,36:85,51:230,53:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw},{20:[1,231],52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK},{20:[1,232],52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK},{9:$Vb1,79:233},{9:$Vb1,79:235},{19:[1,236]},{48:[1,237],49:[1,238]},{19:[1,239]},{2:$VO,10:$VP,25:240},{19:[2,106]},{19:[2,107]},{2:$VO,10:$VP,25:241},o($V71,[2,104]),o($V71,[2,103])],
defaultActions: {3:[2,2],7:[2,1],35:[2,31],36:[2,32],37:[2,33],38:[2,34],39:[2,35],237:[2,106],238:[2,107]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Nodo = require("./Nodo");
    const Error = require('./Error');
    const Token = require('./Token');
    const LinkedList = require("./LinkedList");
    let listTokens = new LinkedList();
    let idError = 1;
    var auxNodo = new Nodo('');
    let idToken = 1;
    let erroLine = 0;
    let errorColumn = 0;
    let errorList = [];
    module.exports.listTokens = listTokens;
    module.exports.auxNodo = auxNodo;
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:listTokens.append(new Token(idToken,"commentMultilineaOrUnilinea",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;
break;
case 2:listTokens.append(new Token(idToken,"SYM_LLAVEA",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 10;
break;
case 3:listTokens.append(new Token(idToken,"SYM_LLAVEC",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 12;
break;
case 4:listTokens.append(new Token(idToken,"SYM_PARA",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 18;
break;
case 5:listTokens.append(new Token(idToken,"SYM_PARC",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 19;
break;
case 6:listTokens.append(new Token(idToken,"SYM_COMA",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 31;
break;
case 7:listTokens.append(new Token(idToken,"SYM_PUNTO",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return '.';
break;
case 8:listTokens.append(new Token(idToken,"SYM_DOSPUNTOS",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 85;
break;
case 9:listTokens.append(new Token(idToken,"SYM_PUNTOCOMA",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 20;
break;
case 10:listTokens.append(new Token(idToken,"BOOLEAN",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 28;
break;
case 11:listTokens.append(new Token(idToken,"BREAK",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 83;
break;
case 12:listTokens.append(new Token(idToken,"CHAR",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 29;
break;
case 13:listTokens.append(new Token(idToken,"CLASS",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 8;
break;
case 14:listTokens.append(new Token(idToken,"CONTINUE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 84;
break;
case 15:listTokens.append(new Token(idToken,"DO",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 81;
break;
case 16:listTokens.append(new Token(idToken,"DOUBLE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 27;
break;
case 17:listTokens.append(new Token(idToken,"ELSE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;  return 77;
break;
case 18:listTokens.append(new Token(idToken,"FALSE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 71;
break;
case 19:listTokens.append(new Token(idToken,"FOR",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 78;
break;
case 20:listTokens.append(new Token(idToken,"IF",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 76;
break;
case 21:listTokens.append(new Token(idToken,"INT",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 26;
break;
case 22:listTokens.append(new Token(idToken,"OUT",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 'out';
break;
case 23:listTokens.append(new Token(idToken,"PRINT",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 73;
break;
case 24:listTokens.append(new Token(idToken,"PRINTLN",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 74;
break;
case 25:listTokens.append(new Token(idToken,"RETURN",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 82;
break;
case 26:listTokens.append(new Token(idToken,"STRING",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;  return 30;
break;
case 27:listTokens.append(new Token(idToken,"SYSTEM",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;  return 'System';
break;
case 28:listTokens.append(new Token(idToken,"TRUE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;  return 70;
break;
case 29:listTokens.append(new Token(idToken,"VOID",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 17;
break;
case 30:listTokens.append(new Token(idToken,"WHILE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 80;
break;
case 31:listTokens.append(new Token(idToken,"PUBLIC",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 7;
break;
case 32:listTokens.append(new Token(idToken,"INTERFACE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 13;
break;
case 33:listTokens.append(new Token(idToken,"OP_MENORIGUAL",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 60;
break;
case 34:listTokens.append(new Token(idToken,"OP_MENOR",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 58;
break;
case 35:listTokens.append(new Token(idToken,"OP_COMPARACION",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 62;
break;
case 36:listTokens.append(new Token(idToken,"OP_MAYORIGUAL",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 61;
break;
case 37:listTokens.append(new Token(idToken,"OP_MAYOR",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 59;
break;
case 38:listTokens.append(new Token(idToken,"OP_DISTINTO",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 63;
break;
case 39:listTokens.append(new Token(idToken,"OP_OR",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 64;
break;
case 40:listTokens.append(new Token(idToken,"OP_AND",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 65;
break;
case 41:listTokens.append(new Token(idToken,"OP_NOT",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 66;
break;
case 42:listTokens.append(new Token(idToken,"OP_IGUAL",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 50;
break;
case 43:listTokens.append(new Token(idToken,"INCREMENTO",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 48;
break;
case 44:listTokens.append(new Token(idToken,"MAS",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;  return 52;
break;
case 45:listTokens.append(new Token(idToken,"DECREMENTO",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 49;
break;
case 46:listTokens.append(new Token(idToken,"MENOS",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 53;
break;
case 47:listTokens.append(new Token(idToken,"PRODUCTO",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 54;
break;
case 48:listTokens.append(new Token(idToken,"DIVISION",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 55;
break;
case 49:listTokens.append(new Token(idToken,"OP_XOR",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 56;
break;
case 50:listTokens.append(new Token(idToken,"PORCENTAJE",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 57;
break;
case 51:listTokens.append(new Token(idToken,"ID",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 9;
break;
case 52:listTokens.append(new Token(idToken,"DECIMAL",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++; return 69;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); listTokens.append(new Token(idToken,"CONT_CHAR",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;  return 68; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); listTokens.append(new Token(idToken,"CONT_STRING",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); idToken++;  return 67; 
break;
case 55:return 5;
break;
case 56: errorList.push(new Error(idError, 'Lexical Error', yy_.yylloc.first_line, yy_.yylloc.first_column, 'Unknown pattern: ' + yy_.yytext)); console.error('Lexical Error: ' + yy_.yytext + ' in the line ' + yy_.yylloc.first_line + ' and column ' + yy_.yylloc.first_column); idError++; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:((\/\*[\s\S]*?\*\/|\/\/.*)))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:out\b)/,/^(?:System\.out\.print\b)/,/^(?:System\.out\.println\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:System\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:public\b)/,/^(?:interface\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)))/,/^(?:(((([0-9]+))(\.(([0-9]+)))?)))/,/^(?:(((('))((?:\\(n|t|r|\\|"|\\')|(?:(?!(('))).))?)((')))))/,/^(?:(((("))((?:\\(("))|(?:(?!(("))).))*)((")))))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}